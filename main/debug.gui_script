local debug_data = require("main.debug")

function init(self)
	self.time = socket.gettime()

	debug_data.reset()

	self.text1_node = gui.get_node("text1")
	self.text2_node = gui.get_node("text2")
	self.text3_node = gui.get_node("text3")
end

function final(self)
end

function update(self, dt)
	-- frame info
	debug_data.updates = debug_data.updates + 1
	debug_data.dt_sum = debug_data.dt_sum + dt

	local t = socket.gettime()
	if t - self.time > 1 then
		local t_delta = t - self.time
		self.time = t

		local s = string.format("Number of updates per %.02f sec = [%d], dt sum = [%.02f],\n fixed updates = [%d], fixed dt sum = [%.02f],\n collision responses = [%d] (<- should equal the number of fixed updates)", 
		t_delta, debug_data.updates, debug_data.dt_sum, debug_data.fixed_updates, debug_data.fixed_dt_sum, debug_data.collision_responses)
		gui.set_text(self.text3_node, s)

		debug_data.reset()
	end

	-- system info
	local s = ""
	s = s .. "system_name = " .. tostring(sys.get_sys_info().system_name) .. "\n"

	s = s .. "display.update_frequency = " .. tostring(sys.get_config("display.update_frequency")) .. ""
	s = s .. ", display.vsync = " .. tostring(sys.get_config("display.vsync")) .. ""
	s = s .. ", display.swap_interval = " .. tostring(sys.get_config("display.swap_interval")) .. "\n"

	s = s .. "physics.type = " .. tostring(sys.get_config("physics.type")) .. ""
	s = s .. ", physics.use_fixed_timestep = " .. tostring(sys.get_config("physics.use_fixed_timestep")) .. "\n"

	s = s .. "engine.fixed_update_frequency = " .. tostring(sys.get_config("engine.fixed_update_frequency")) .. "\n"

	gui.set_text(self.text1_node, s)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("inc_collision_response") then
		
	elseif message_id == hash("anchor_speed") then
		local s = string.format("Anchor speed: [%.02f] px/sec", message.speed)
		gui.set_text(self.text2_node, s)
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
